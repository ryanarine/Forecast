{"version":3,"sources":["images/Rainy.jpg","images/Snowy.jpg","images/Cloudy.jpg","images/Clear.jpg","images/Thunderstorm.jpg","images/Drizzle.jpg","images/Fog.jpg","Images.js","WeatherCard.js","DayCast.js","Map.js","Data.js","CitySelectBox.js","Forecast.js","index.js"],"names":["module","exports","getBgImg","condition","clear","cloudy","rainy","snowy","storm","drizzle","fog","WeatherCard","props","className","style","backgroundImage","day","high","low","DayCast","backgroundColor","mainCondition","backgroundSize","backgroundPosition","timeSlots","columns","headers","map","header","i","key","tableEntries","values","start","conditions","descriptions","humidities","cloudiness","windSpeeds","align","colSpan","length","startingLat","startingLng","startingZoom","prevLat","prevLng","prevZoom","Map","state","lat","lng","handleClick","bind","handleSubmit","e","this","setState","submit","id","type","value","onClick","bootstrapURLKeys","defaultCenter","defaultZoom","onChange","center","zoom","Component","days","getCityHeader","data","name","city","getDays","arr","push","Date","list","dt_txt","slice","getDay","getConditions","conds","starts","weights","maxValue","maxCondition","j","cond","getHighLows","lows","highs","Number","MAX_SAFE_INTEGER","end","Math","max","main","temp_max","min","temp_min","toFixed","getStarts","entry1","getHours","getHourly","temps","descs","humids","clouds","temp","weather","description","humidity","all","wind","speed","url","a","fetch","response","status","json","forecast","info","highLows","hourlyData","hourly","hourlyConditions","getEverything","cityNames","CitySelectBox","handleChange","event","target","cities","index","codes","toronto","brampton","mississauga","richmondhill","kitchener","waterloo","markham","ottawa","hamilton","vaughan","oshawa","changeURL","newurl","Forecast","dayIndex","handleMapSubmit","dayFocus","lon","changeURLByCoords","componentDidMount","preventDefault","elements","width","margin","cards","onSubmit","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9722a162.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Rainy.869ecddf.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Snowy.753bb223.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Cloudy.7b0d2d01.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Clear.00892c85.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Thunderstorm.17776440.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Drizzle.90fc98b5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Fog.e55044d6.jpg\";","/* Handles condition to image mapping */\r\nimport rainy from \"./images/Rainy.jpg\";\r\nimport snowy from \"./images/Snowy.jpg\";\r\nimport cloudy from \"./images/Cloudy.jpg\";\r\nimport clear from \"./images/Clear.jpg\";\r\nimport storm from \"./images/Thunderstorm.jpg\";\r\nimport drizzle from \"./images/Drizzle.jpg\";\r\nimport fog from \"./images/Fog.jpg\";\r\nimport \"./WeatherCard.css\";\r\n\r\nfunction getBgImg(condition) {\r\n  if (condition === \"Clear\") return clear;\r\n  if (condition === \"Clouds\") return cloudy;\r\n  if (condition === \"Rain\") return rainy;\r\n  if (condition === \"Snow\") return snowy;\r\n  if (condition === \"Thunderstorm\") return storm;\r\n  if (condition === \"Drizzle\") return drizzle;\r\n  return fog;\r\n}\r\n\r\nexport default getBgImg;\r\n","import React from 'react';\r\nimport getBgImg from './Images';\r\n\r\nfunction WeatherCard(props) {\r\n\treturn (<div className=\"weatherCard\" style={{backgroundImage: \"url(\" + getBgImg(props.condition) + \")\"}}>\r\n\t\t<h2 className=\"mainh2\">{props.day}</h2>\r\n\t\t<h2 className=\"mainh2\">{props.condition}</h2>\r\n\t\t<h2 className=\"highh2\">{\"High: \" + props.high + \"°C\"}</h2>\r\n\t\t<h2 className=\"lowh2\">{\"Low: \" + props.low + \"°C\"}</h2>\r\n\t</div>);\r\n}\r\n\r\nexport default WeatherCard\r\n\r\n","import React from \"react\";\r\nimport getBgImg from \"./Images\";\r\n\r\nfunction DayCast(props) {\r\n  const style = {\r\n    backgroundColor: \"mediumaquamarine\",\r\n    backgroundImage: \"url(\" + getBgImg(props.mainCondition) + \")\",\r\n    backgroundSize: \"cover\",\r\n    backgroundPosition: \"center\"\r\n  };\r\n\r\n  const timeSlots = [\"12 AM\", \"3 AM\", \"6 AM\", \"9 AM\", \"12 PM\", \"3 PM\", \"6 PM\", \"9 PM\"];\r\n  const columns = [\"Time\", \"Temperature\", \"Condition\", \"Description\", \"Humidity\", \"Cloudiness\", \"Wind Speed\"];\r\n  const headers = columns.map((header, i) => <th key={i}>{header}</th>);\r\n  const tableEntries = [0, 1, 2, 3, 4, 5, 6, 7].map(i => (\r\n    <tr key={i}>\r\n      <td>{timeSlots[i]}</td>\r\n      <td>{props.values[props.start + i]}</td>\r\n      <td>{props.conditions[props.start + i]}</td>\r\n      <td>{props.descriptions[props.start + i]}</td>\r\n      <td>{props.humidities[props.start + i]}</td>\r\n      <td>{props.cloudiness[props.start + i]}</td>\r\n      <td>{props.windSpeeds[props.start + i]}</td>\r\n    </tr>\r\n  ));\r\n  return (\r\n    <table align={\"center\"} style={style}>\r\n      <tbody>\r\n        <tr>\r\n          <th colSpan={columns.length}>{props.day}</th>\r\n        </tr>\r\n        <tr>{headers}</tr>\r\n        {tableEntries}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nexport default DayCast;\r\n","import React, { Component } from \"react\";\r\nimport GoogleMap from \"google-map-react\";\r\n\r\nconst mapkey = \"AIzaSyA5XxXKw44uRve7wAs046c_jGmKNhK6B1Y\";\r\nvar startingLat = 43.59;\r\nvar startingLng = -79.7;\r\nvar startingZoom = 8;\r\nvar prevLat = startingLat;\r\nvar prevLng = startingLng;\r\nvar prevZoom = startingZoom;\r\n\r\nclass Map extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { lat: startingLat, lng: startingLng };\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleClick(e) {\r\n    this.setState({ lat: e.lat, lng: e.lng });\r\n  }\r\n\r\n  handleSubmit() {\r\n    this.props.submit(this.state.lat, this.state.lng);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"mapContainer\">\r\n        <label>Or click on the map to see the forecast there</label> <br></br>\r\n        <label>\r\n          Latitude: {this.state.lat} Longitude: {this.state.lng}\r\n        </label>\r\n        <br></br>\r\n        <input type=\"submit\" value=\"Submit Coordinates\" onClick={this.handleSubmit} />\r\n        <GoogleMap\r\n          bootstrapURLKeys={{ key: mapkey }}\r\n          defaultCenter={{ lat: startingLat, lng: startingLng }}\r\n          defaultZoom={startingZoom}\r\n          onClick={e => this.setState({ lat: e.lat, lng: e.lng })}\r\n          onChange={map => {\r\n            prevLat = map.center.lat;\r\n            prevLng = map.center.lng;\r\n            prevZoom = map.zoom;\r\n          }}\r\n        ></GoogleMap>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Change started configuration to the previous configuration\r\n  componentWillUnmount() {\r\n    startingLat = prevLat;\r\n    startingLng = prevLng;\r\n    startingZoom = prevZoom;\r\n  }\r\n}\r\n\r\nexport default Map;\r\n","const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n\r\n/*\r\n-The following are functions that parse the json data\r\n-The data comes in as an array of 40 entries\r\n-Each entry represents the weather during a 3 hour time period\r\n-Roughly every 3 hours the API updates the data, so a new time period is entered\r\nbut the oldest one is removed\r\n-Since this is a 5-day forecast, the data for the 6th day (if there is one)\r\nis ignored\r\n-The missing data for the 1st day is compensated for by inserting the string\r\n'N/A' for the missing time periods\r\n*/\r\n\r\n// Get the name of the city and return header string\r\nfunction getCityHeader(data) {\r\n  let name = data.city.name;\r\n  if (name) {\r\n    return name + \"'s Forecast\";\r\n  }\r\n  return \"Forecast of Unknown City\";\r\n}\r\n\r\n// Get the names of the 5 days\r\nfunction getDays(data) {\r\n  var arr = [];\r\n  for (let i = 0; i < 40; i += 8) {\r\n    arr.push(days[(new Date(data.list[i].dt_txt.slice(0, 10)).getDay() + 1) % 7]);\r\n  }\r\n  return arr;\r\n}\r\n\r\n// Get the main conditions of each day\r\nfunction getConditions(conds, starts) {\r\n  var arr = [];\r\n  var day = [];\r\n  // Weight value is based how important a timeslot is to a normal working citizen\r\n  // For example the weather at 3AM is significantly less important\r\n  // than the weather at 3PM to a normal working citizen\r\n  // In other words, working hours have a larger weight than sleeping/resting hours\r\n  const weights = [1, 1, 2, 3, 3, 3, 2, 1];\r\n  for (let i = 0; i < 5; i++) {\r\n    day = { maxValue: 0, maxCondition: \"N/A\" };\r\n    for (let j = 8 * i; j < 8 * (i + 1); j++) {\r\n      let cond = conds[j];\r\n      if (cond === \"N/A\") continue;\r\n      day[cond] = day[cond] + weights[j % 8] || weights[j % 8];\r\n      if (day[cond] > day.maxValue) {\r\n        day.maxValue = day[cond];\r\n        day.maxCondition = cond;\r\n      }\r\n    }\r\n    arr.push(day.maxCondition);\r\n  }\r\n  return arr;\r\n}\r\n\r\n// Get the high and low temperatures of each day\r\nfunction getHighLows(data, starts) {\r\n  var lows = [];\r\n  var highs = [];\r\n  for (let i = 0; i < starts.length - 1; i++) {\r\n    var high = 0; // Temperatures in Kelvin cannot go below or at 0\r\n    var low = Number.MAX_SAFE_INTEGER;\r\n    var start = starts[i];\r\n    var end = starts[i + 1];\r\n    for (let j = start; j < end; j++) {\r\n      high = Math.max(high, data[j].main.temp_max);\r\n      low = Math.min(low, data[j].main.temp_min);\r\n    }\r\n    highs.push((high - 273.15).toFixed(2));\r\n    lows.push((low - 273.15).toFixed(2));\r\n  }\r\n  return { highs: highs, lows: lows };\r\n}\r\n\r\n// Get the ending index of the data array that corresponds to the first day\r\nfunction getEnd(entry1) {\r\n  return (24 - new Date(entry1.dt_txt).getHours()) / 3;\r\n}\r\n\r\n// Get the starting index of the data array that corresponds to each day\r\nfunction getStarts(data) {\r\n  var arr = [];\r\n  let end = getEnd(data[0]);\r\n  arr.push(0);\r\n  for (let i = end; i <= 40; i += 8) {\r\n    arr.push(i);\r\n  }\r\n  return arr;\r\n}\r\n\r\n// Get the data (temperature, condition, condition description) for each time period\r\nfunction getHourly(arr, starts) {\r\n  var start = starts[1];\r\n  var temps = [];\r\n  var conds = [];\r\n  var descs = [];\r\n  var humids = [];\r\n  var clouds = [];\r\n  var windSpeeds = [];\r\n  // All of the data for the first day may not be present\r\n  // Push all the N/A data\r\n  for (let i = 0; i < 8 - start; i++) {\r\n    temps.push(\"N/A\");\r\n    conds.push(\"N/A\");\r\n    descs.push(\"N/A\");\r\n    humids.push(\"N/A\");\r\n    clouds.push(\"N/A\");\r\n    windSpeeds.push(\"N/A\");\r\n  }\r\n  for (let i = 0; i < 40 - 8 + start; i++) {\r\n    temps.push((arr[i].main.temp - 273.15).toFixed(2) + \"°C\");\r\n    conds.push(arr[i].weather[0].main);\r\n    descs.push(arr[i].weather[0].description);\r\n    humids.push(arr[i].main.humidity + \"%\");\r\n    clouds.push(arr[i].clouds.all + \"%\");\r\n    windSpeeds.push(arr[i].wind.speed + \" m/s\");\r\n  }\r\n  return { temps, conds, descs, humids, clouds, windSpeeds };\r\n}\r\n\r\n// Get all the relevant data\r\nasync function getEverything(url) {\r\n  var response = await fetch(url);\r\n  if (response.status === 429) {\r\n    return -1;\r\n  } // Too many requests\r\n  var forecast = await response.json();\r\n  var starts = getStarts(forecast.list);\r\n  var info = {};\r\n  info.header = getCityHeader(forecast);\r\n  info.days = getDays(forecast);\r\n  var highLows = getHighLows(forecast.list, starts);\r\n  var hourlyData = getHourly(forecast.list, starts);\r\n  info.conditions = getConditions(hourlyData.conds, starts);\r\n  info.highs = highLows.highs;\r\n  info.lows = highLows.lows;\r\n  info.hourly = hourlyData.temps;\r\n  info.hourlyConditions = hourlyData.conds;\r\n  info.descriptions = hourlyData.descs;\r\n  info.humidities = hourlyData.humids;\r\n  info.cloudiness = hourlyData.clouds;\r\n  info.windSpeeds = hourlyData.windSpeeds;\r\n  return info;\r\n}\r\n\r\nexport default getEverything;\r\n","import React, { Component } from \"react\";\r\n\r\nconst values = [\r\n  \"toronto\",\r\n  \"brampton\",\r\n  \"mississauga\",\r\n  \"richmondhill\",\r\n  \"kitchener\",\r\n  \"waterloo\",\r\n  \"markham\",\r\n  \"ottawa\",\r\n  \"hamilton\",\r\n  \"vaughan\",\r\n  \"oshawa\"\r\n];\r\n\r\nconst cityNames = [\r\n  \"Toronto\",\r\n  \"Brampton\",\r\n  \"Mississauga\",\r\n  \"Richmond Hill\",\r\n  \"Kitchener\",\r\n  \"Waterloo\",\r\n  \"Markham\",\r\n  \"Ottawa\",\r\n  \"Hamilton\",\r\n  \"Vaughan\",\r\n  \"Oshawa\"\r\n];\r\n\r\nclass CitySelectBox extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      city: \"toronto\",\r\n      name: props.name\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    if (event.target.value !== this.state.city) {\r\n      this.setState({ city: event.target.value });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const cities = values.map((value, index) => (\r\n      <option key={index} value={value}>\r\n        {cityNames[index]}\r\n      </option>\r\n    ));\r\n    return (\r\n      <select value={this.state.city} onChange={this.handleChange} name={this.state.name}>\r\n        {cities}\r\n      </select>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CitySelectBox;\r\n","import React from \"react\";\r\nimport WeatherCard from \"./WeatherCard\";\r\nimport DayCast from \"./DayCast\";\r\nimport \"./Forecast.css\";\r\nimport Map from \"./Map\";\r\nimport getEverything from \"./Data\";\r\nimport CitySelectBox from \"./CitySelectBox\";\r\n\r\n/* Global variables */\r\nconst key = \"54a84a123d401ac68736a6bca89f4301\";\r\nconst citySelectName = \"box\"; // name of select tag  in CitySelectBox component\r\n\r\nconst codes = {\r\n  toronto: \"6167865\",\r\n  brampton: \"5907364\",\r\n  mississauga: \"6075357\",\r\n  richmondhill: \"6122091\",\r\n  kitchener: \"5992996\",\r\n  waterloo: \"6176823\",\r\n  markham: \"6066513\",\r\n  ottawa: \"6094817\",\r\n  hamilton: \"5969782\",\r\n  vaughan: \"6173577\",\r\n  oshawa: \"6094578\"\r\n};\r\n\r\nvar url = \"https://api.openweathermap.org/data/2.5/forecast?id=6167865&appid=\" + key;\r\n\r\n/* Helper Functions */\r\nfunction changeURLByCity(city) {\r\n  let newurl = \"https://api.openweathermap.org/data/2.5/forecast?id=\" + codes[city] + \"&appid=\" + key;\r\n  return changeURL(newurl);\r\n}\r\n\r\nfunction changeURLByCoords(lat, lon) {\r\n  let newurl = \"https://api.openweathermap.org/data/2.5/forecast?lat=\" + lat + \"&lon=\" + lon + \"&appid=\" + key;\r\n  return changeURL(newurl);\r\n}\r\n\r\n// return whether or not url changed\r\nfunction changeURL(newurl) {\r\n  if (newurl === url) {\r\n    return false;\r\n  }\r\n  url = newurl;\r\n  return true;\r\n}\r\n\r\n/* The Component */\r\nclass Forecast extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      days: 0,\r\n      highs: 0, // high temperatures for each day\r\n      lows: 0, //  low temperatures for each day\r\n      conditions: 0, // conditions for each day\r\n      header: \"Toronto's Forecast\", // main header for application\r\n      status: 200, // status of fetch calls\r\n      hourly: [], // temperatures for each 3-hour time period\r\n      hourlyConditions: [], // conditions for each 3-hour time period\r\n      descriptions: [], // descriptions of the conditions for each 3-hour time period\r\n      humidities: [], // humidity percentage for each 3-hour time period\r\n      cloudiness: [], // percentage of clouds for each 3-hour time period\r\n      windSpeeds: [], // wind speed for each 3-hour time period\r\n      dayIndex: -1 // index of which weather card is currently being focused on\r\n      // -1 means no weather card is being focused on i.e main forecast is displayed\r\n    };\r\n    this.handleMapSubmit = this.handleMapSubmit.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.dayFocus = this.dayFocus.bind(this);\r\n  }\r\n\r\n  // Executes when coordinates are submitted\r\n  handleMapSubmit(lat, lon) {\r\n    if (changeURLByCoords(lat, lon)) {\r\n      this.componentDidMount();\r\n    }\r\n  }\r\n\r\n  // Executes when one of the given Ontario cities are submitted\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    if (changeURLByCity(event.target.elements[citySelectName].value)) {\r\n      this.componentDidMount();\r\n    }\r\n  }\r\n\r\n  // Executes when a single WeatherCards gets clicked on\r\n  // index indicates which WeatherCard was clicked\r\n  dayFocus(index) {\r\n    this.setState({ dayIndex: index });\r\n  }\r\n\r\n  render() {\r\n    // Default render\r\n    if (this.state.days === 0) {\r\n      return <h1>{\"The Forecast is loading, please wait\"}</h1>;\r\n    }\r\n    // API only allows 60 requests per minute\r\n    if (this.state.status === 429) {\r\n      return <h1>{\"Too many forecast requests have been made. Please come back in an hour.\"}</h1>;\r\n    }\r\n    // render detailed forecast for single day\r\n    if (this.state.dayIndex !== -1) {\r\n      return (\r\n        <div style={{ width: \"fit-content\", margin: \"auto\" }}>\r\n          <DayCast\r\n            day={this.state.days[this.state.dayIndex]}\r\n            values={this.state.hourly}\r\n            start={this.state.dayIndex * 8}\r\n            conditions={this.state.hourlyConditions}\r\n            descriptions={this.state.descriptions}\r\n            humidities={this.state.humidities}\r\n            cloudiness={this.state.cloudiness}\r\n            windSpeeds={this.state.windSpeeds}\r\n            mainCondition={this.state.conditions[this.state.dayIndex]}\r\n          />\r\n          <button id=\"prevbtn\" className=\"cardButton\" onClick={() => this.dayFocus((this.state.dayIndex + 4) % 5)}>\r\n            Previous\r\n          </button>\r\n          <button id=\"backbtn\" className=\"cardButton\" onClick={() => this.dayFocus(-1)}>\r\n            Back\r\n          </button>\r\n          <button id=\"nextbtn\" className=\"cardButton\" onClick={() => this.dayFocus((this.state.dayIndex + 1) % 5)}>\r\n            Next\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n    // render basic forecast for 5 days\r\n    else {\r\n      const cards = [0, 1, 2, 3, 4].map(i => (\r\n        <div onClick={() => this.dayFocus(i)} className={\"Card\"} key={i}>\r\n          <WeatherCard\r\n            day={this.state.days[i]}\r\n            high={this.state.highs[i]}\r\n            low={this.state.lows[i]}\r\n            condition={this.state.conditions[i]}\r\n          />\r\n        </div>\r\n      ));\r\n      return (\r\n        <div>\r\n          <h1>{this.state.header}</h1>\r\n\r\n          <div id=\"cardContainer\">{cards}</div>\r\n\r\n          <form onSubmit={this.handleSubmit}>\r\n            <label>\r\n              Choose a city to display its forecast <br></br>\r\n              <CitySelectBox name={citySelectName} />\r\n            </label>\r\n            <input type=\"submit\" value=\"Submit\" />\r\n          </form>\r\n\r\n          <Map submit={this.handleMapSubmit} />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  // Data gets fetched here\r\n  async componentDidMount() {\r\n    var info = await getEverything(url);\r\n    info === -1 ? this.setState({ status: 429 }) : this.setState({ ...info });\r\n  }\r\n}\r\n\r\nexport default Forecast;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Forecast from \"./Forecast.js\";\r\n\r\nReactDOM.render(<Forecast />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}