{"version":3,"sources":["images/Rainy.png","images/Snowy.png","images/cloudy.jpg","images/Clear.jpeg","images/Thunderstorm.jpg","images/Drizzle.jpg","images/Fog.png","Images.js","WeatherCard.js","DayCast.js","Map.js","Data.js","CitySelectBox.js","Forecast.js","index.js"],"names":["module","exports","getBgImg","condition","clear","cloudy","rainy","snowy","storm","drizzle","fog","WeatherCard","props","className","style","backgroundImage","day","high","low","DayCast","backgroundColor","mainCondition","backgroundSize","timeSlots","tableEntries","map","i","key","values","start","conditions","descriptions","align","colSpan","startingLat","startingLng","startingZoom","prevLat","prevLng","prevZoom","Map","state","lat","lng","handleClick","bind","handleSubmit","e","this","setState","submit","id","type","value","onClick","bootstrapURLKeys","defaultCenter","defaultZoom","onChange","center","zoom","Component","days","getCityHeader","data","name","city","getDays","arr","push","Date","list","dt_txt","slice","getDay","getConditions","conds","starts","weights","maxValue","maxCondition","j","cond","getHighLows","lows","highs","length","Number","MAX_SAFE_INTEGER","end","Math","max","main","temp_max","min","temp_min","toFixed","getStarts","entry1","getHours","getHourly","temps","descs","temp","weather","description","url","a","fetch","response","status","json","forecast","info","header","highLows","hourlyData","hourly","hourlyConditions","getEverything","cityNames","CitySelectBox","handleChange","event","target","cities","index","codes","toronto","brampton","mississauga","richmondhill","kitchener","waterloo","markham","ottawa","hamilton","vaughan","oshawa","daycastStyle","minWidth","changeURL","newurl","Forecast","dayIndex","handleMapSubmit","dayFocus","lon","changeURLByCoords","componentDidMount","preventDefault","elements","cards","onSubmit","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5d2ed376.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Rainy.2f78334f.png\";","module.exports = __webpack_public_path__ + \"static/media/Snowy.cad3feb8.png\";","module.exports = __webpack_public_path__ + \"static/media/cloudy.a4699f94.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Clear.122dd7e9.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/Thunderstorm.45c32976.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Drizzle.eada9e67.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Fog.79022001.png\";","/* Handles condition to image mapping */\r\nimport rainy from './images/Rainy.png';\r\nimport snowy from './images/Snowy.png';\r\nimport cloudy from './images/cloudy.jpg';\r\nimport clear from './images/Clear.jpeg';\r\nimport storm from './images/Thunderstorm.jpg';\r\nimport drizzle from './images/Drizzle.jpg';\r\nimport fog from './images/Fog.png';\r\nimport \"./WeatherCard.css\";\r\n\r\nfunction getBgImg(condition) {\r\n\t\tif (condition === \"Clear\") return clear;\r\n\t\tif (condition === \"Clouds\") return cloudy;\r\n\t\tif (condition === \"Rain\") return rainy;\r\n\t\tif (condition === \"Snow\") return snowy;\r\n\t\tif (condition === \"Thunderstorm\") return storm;\r\n\t\tif (condition === \"Drizzle\") return drizzle;\r\n\t\treturn fog;\r\n}\r\n\r\nexport default getBgImg","import React from 'react';\r\nimport getBgImg from './Images';\r\n\r\nfunction WeatherCard(props) {\r\n\treturn (<div className=\"weatherCard\" style={{backgroundImage: \"url(\" + getBgImg(props.condition) + \")\"}}>\r\n\t\t<h2 className=\"mainh2\">{props.day}</h2>\r\n\t\t<h2 className=\"mainh2\">{props.condition}</h2>\r\n\t\t<h2 className=\"highh2\">{\"High: \" + props.high + \"°C\"}</h2>\r\n\t\t<h2 className=\"lowh2\">{\"Low: \" + props.low + \"°C\"}</h2>\r\n\t</div>);\r\n}\r\n\r\nexport default WeatherCard\r\n\r\n","import React from 'react';\r\nimport getBgImg from './Images';\r\n\r\nfunction DayCast(props) {\r\n\tconst style = {backgroundColor: \"mediumaquamarine\",\r\n\tbackgroundImage: \"url(\" + getBgImg(props.mainCondition) + \")\",\r\n\tbackgroundSize: \"cover\"}\r\n\r\n\tconst timeSlots = [\"12 AM\", \"3 AM\", \"6 AM\", \"9 AM\", \"12 PM\", \"3 PM\", \"6 PM\", \"9 PM\"];\r\n\tconst tableEntries = [0,1,2,3,4,5,6,7].map(i => \r\n\t\t<tr key={i}>\r\n\t\t\t<td>{timeSlots[i]}</td>\r\n\t\t\t<td>{props.values[props.start + i]}</td>\r\n\t\t\t<td>{props.conditions[props.start + i]}</td>\r\n\t\t\t<td>{props.descriptions[props.start + i]}</td>\r\n\t\t</tr>\r\n\t);\r\n\r\n\treturn(<table align={\"center\"} style={style}>\r\n\t\t<tbody>\r\n\t\t\t<tr><th colSpan=\"4\">{props.day}</th></tr>\r\n\t\t\t<tr>\r\n\t\t\t<th>{\"Time\"}</th>\r\n\t\t\t<th>{\"Temperature\"}</th>\r\n\t\t\t<th>{\"Condition\"}</th>\r\n\t\t\t<th>{\"Description\"}</th>\r\n\t\t\t</tr>\t\t\r\n\t\t\t{tableEntries}\r\n\t\t</tbody>\r\n\t</table>);\r\n}\r\n\r\nexport default DayCast","import React, { Component } from 'react';\r\nimport GoogleMap from 'google-map-react';\r\n\r\nconst mapkey = \"AIzaSyA5XxXKw44uRve7wAs046c_jGmKNhK6B1Y\";\r\nvar startingLat = 43.59;\r\nvar startingLng = -79.70;\r\nvar startingZoom = 8;\r\nvar prevLat = startingLat;\r\nvar prevLng = startingLng;\r\nvar prevZoom = startingZoom;\r\n\r\nclass Map extends Component {\r\n  constructor(){\r\n\t\tsuper();\r\n\t\tthis.state = {lat: startingLat, lng: startingLng}\r\n\t\tthis.handleClick = this.handleClick.bind(this);\r\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\r\n\t}\r\n\t\r\n\thandleClick(e){\r\n\t\tthis.setState({lat: e.lat, lng: e.lng});\r\n\t}\r\n\t\r\n\thandleSubmit(){\r\n\t\tthis.props.submit(this.state.lat, this.state.lng);\r\n\t}\r\n\t\r\n  render() {\r\n    return (\r\n      <div id=\"mapContainer\">\r\n\t\t\t\t<label>Or click on the map to see the forecast there</label> <br></br>\r\n\t\t\t\t<label>Latitude: {this.state.lat} Longitude: {this.state.lng}</label>\r\n\t\t\t\t<br></br>\r\n\t\t\t\t<input type=\"submit\" value=\"Submit Coordinates\" onClick={this.handleSubmit}/>\r\n        <GoogleMap\r\n          bootstrapURLKeys={{ key: mapkey}}\r\n          defaultCenter={{lat: startingLat, lng: startingLng}}\r\n          defaultZoom={startingZoom}\r\n\t\t\t\t\tonClick={(e) => this.setState({lat: e.lat, lng: e.lng})}\r\n\t\t\t\t\tonChange={(map) => {prevLat = map.center.lat; prevLng = map.center.lng; prevZoom = map.zoom}}\r\n        >\r\n        </GoogleMap>\r\n      </div>\r\n    );\r\n  }\r\n\t\r\n\t// Change started configuration to the previous configuration\r\n\tcomponentWillUnmount() {\r\n\t\t\tstartingLat = prevLat;\r\n\t\t\tstartingLng = prevLng;\r\n\t\t\tstartingZoom = prevZoom;\r\n\t}\r\n}\r\n\r\nexport default Map;\r\n\r\n","const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n\r\n/*\r\n-The following are functions that parse the json data\r\n-The data comes in as an array of 40 entries\r\n-Each entry represents the weather during a 3 hour time period\r\n-Roughly every 3 hours the API updates the data, so a new time period is entered\r\nbut the oldest one is removed\r\n-Since this is a 5-day forecast, the data for the 6th day (if there is one)\r\nis ignored\r\n-The missing data for the 1st day is compensated for by inserting the string\r\n'N/A' for the missing time periods\r\n*/\r\n\r\n// Get the name of the city and return header string\r\nfunction getCityHeader(data) {\r\n\tlet name = data.city.name;\r\n\tif (name){\r\n\t\treturn name + \"'s Forecast\";\r\n\t}\r\n\treturn \"Forecast of Unknown City\";\r\n}\r\n\r\n// Get the names of the 5 days\r\nfunction getDays(data) {\r\n\tvar arr = [];\r\n\tfor (let i = 0; i < 40; i+=8){\r\n\t\tarr.push(days[(new Date(data.list[i].dt_txt.slice(0,10)).getDay() + 1) % 7]);\r\n\t}\r\n\treturn arr;\r\n}\r\n\r\n// Get the main conditions of each day\t\r\nfunction getConditions(conds, starts) {\r\n\tvar arr = [];\r\n\tvar day = [];\r\n\t// Weight value is based how important a timeslot is to a normal working citizen\r\n\t// For example the weather at 3AM is significantly less important \r\n\t// than the weather at 3PM to a normal working citizen\r\n\t// In other words, working hours have a larger weight than sleeping/resting hours\r\n  const weights = [1, 1, 2, 3, 3, 3, 2, 1];\r\n\tfor (let i = 0; i < 5; i++){\r\n\t\tday = {maxValue: 0, maxCondition: \"N/A\"};\r\n\t\tfor(let j = 8 * i; j < 8 * (i+1); j++){\r\n\t\t\tlet cond = conds[j]\r\n\t\t\tif (cond === \"N/A\") continue;\r\n\t\t\tday[cond] = day[cond]+weights[j % 8] || weights[j % 8];\r\n\t\t\tif (day[cond] > day.maxValue){\r\n\t\t\t\tday.maxValue = day[cond];\r\n\t\t\t\tday.maxCondition = cond;\r\n\t\t\t}\r\n\t\t}\r\n\t\tarr.push(day.maxCondition);\r\n\t}\r\n\treturn arr;\r\n}\r\n\r\n// Get the high and low temperatures of each day\r\nfunction getHighLows(data, starts) {\r\n\tvar lows = [];\r\n\tvar highs = [];\r\n\tfor (let i = 0; i < starts.length - 1; i++){\r\n\t\tvar high = 0; // Temperatures in Kelvin cannot go below or at 0\r\n\t\tvar low = Number.MAX_SAFE_INTEGER;\r\n\t\tvar start = starts[i];\r\n\t\tvar end = starts[i + 1];\r\n\t\tfor (let j = start; j < end; j++){\r\n\t\t\thigh = Math.max(high, data.list[j].main.temp_max);\r\n\t\t\tlow = Math.min(low, data.list[j].main.temp_min);\r\n\t\t}\r\n\t\thighs.push((high - 273.15).toFixed(2));\r\n\t\tlows.push((low - 273.15).toFixed(2));\r\n\t}\r\n\treturn {highs: highs, lows: lows};\r\n}\r\n\r\n// Get the ending index of the data array that corresponds to the first day\r\nfunction getEnd(entry1) {\r\n\treturn (24 - new Date(entry1.dt_txt).getHours()) / 3;\r\n}\r\n\r\n// Get the starting index of the data array that corresponds to each day\r\nfunction getStarts(data) {\r\n\tvar arr = [];\r\n\tlet end = getEnd(data[0]);\r\n\tarr.push(0);\r\n\tfor (let i = end; i <= 40; i+=8){\r\n\t\tarr.push(i);\r\n\t}\r\n\treturn arr;\r\n}\r\n\r\n// Get the data (temperature, condition, condition description) for each time period\r\nfunction getHourly(arr, starts){\r\n\tvar start = starts[1];\r\n\t\tvar temps = [];\r\n\t\tvar conds = [];\r\n\t\tvar descs = [];\r\n\t\t// All of the data for the first day may not be present\r\n\t\t// Push all the N/A data\r\n\t\tfor (let i = 0; i < 8-start; i++){\r\n\t\t\ttemps.push(\"N/A\");\r\n\t\t\tconds.push(\"N/A\");\r\n\t\t\tdescs.push(\"N/A\");\r\n\t\t}\t\r\n\t\tfor (let i = 0; i < (40 - 8 + start); i++){\r\n\t\t\ttemps.push((arr[i].main.temp - 273.15).toFixed(2) + \"°C\");\r\n\t\t\tconds.push(arr[i].weather[0].main);\r\n\t\t\tdescs.push(arr[i].weather[0].description);\r\n\t\t}\r\n\t\treturn {temps, conds, descs};\r\n}\r\n\r\n// Get all the relevant data\r\nasync function getEverything(url){\r\n\tvar response = await fetch(url);\r\n\t\tif (response.status === 429){return -1;} // Too many requests\r\n\t\tvar forecast =  await response.json();\r\n\t\tvar starts = getStarts(forecast.list);\r\n\t\tvar info = {};\r\n\t\tinfo.header = getCityHeader(forecast);\r\n\t\tinfo.days = getDays(forecast);\r\n\t\tvar highLows = getHighLows(forecast, starts);\r\n\t\tvar hourlyData = getHourly(forecast.list, starts);\r\n\t\tinfo.conditions = getConditions(hourlyData.conds, starts);\r\n\t\tinfo.highs = highLows.highs;\r\n\t\tinfo.lows = highLows.lows;\r\n\t\tinfo.hourly  = hourlyData.temps;\r\n\t\tinfo.hourlyConditions = hourlyData.conds;\r\n\t\tinfo.descriptions = hourlyData.descs;\r\n\t\treturn await info;\r\n}\r\n\r\nexport default getEverything;","import React, { Component } from 'react'\r\n\r\nconst values = [\"toronto\",\r\n\"brampton\",\r\n\"mississauga\", \r\n\"richmondhill\", \r\n\"kitchener\", \r\n\"waterloo\", \r\n\"markham\", \r\n\"ottawa\", \r\n\"hamilton\",\r\n\"vaughan\",\r\n\"oshawa\"];\r\n\r\nconst cityNames = [\"Toronto\",\r\n\"Brampton\",\r\n\"Mississauga\", \r\n\"Richmond Hill\", \r\n\"Kitchener\", \r\n\"Waterloo\", \r\n\"Markham\", \r\n\"Ottawa\", \r\n\"Hamilton\",\r\n\"Vaughan\",\r\n\"Oshawa\"];\r\n\r\nclass CitySelectBox extends Component {\r\n    constructor(props){\r\n        super();\r\n        this.state  = {\r\n            city: 'toronto',\r\n            name: props.name\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n\t\tif (event.target.value !== this.state.city) {\r\n\t\t\tthis.setState({city: event.target.value});\r\n\t\t}\r\n\t}\r\n    \r\n    render() {\r\n        const cities = values.map((value, index) => \r\n            <option key={index} value={value}>{cityNames[index]}</option>\r\n        )\r\n        return (\r\n            <select value={this.state.city} onChange={this.handleChange} name={this.state.name}>\r\n                {cities}\r\n\t\t\t</select>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CitySelectBox","import React from 'react';\r\nimport WeatherCard from './WeatherCard';\r\nimport DayCast from './DayCast';\r\nimport './Forecast.css';\r\nimport Map from './Map';\r\nimport getEverything from './Data';\r\nimport CitySelectBox from './CitySelectBox';\r\n\r\n\r\n/* Global variables */\r\nconst key = \"54a84a123d401ac68736a6bca89f4301\";\r\nconst citySelectName = \"box\"; // name of select tag  in CitySelectBox component\r\n\r\nconst codes = {toronto: '6167865',\r\nbrampton: '5907364',\r\nmississauga: '6075357',\r\nrichmondhill: '6122091',\r\nkitchener: '5992996',\r\nwaterloo: '6176823', \r\nmarkham: '6066513',\r\nottawa: '6094817',\r\nhamilton: '5969782', \r\nvaughan: '6173577', \r\noshawa: '6094578'};\r\n\r\nvar url = \"https://api.openweathermap.org/data/2.5/forecast?id=6167865&appid=\" + key;\r\n\r\nconst daycastStyle = {\r\n\tminWidth: \"500px + 3vh\"\r\n};\r\n\r\n/* Helper Functions */\r\nfunction changeURLByCity(city){\r\n\tlet newurl = \"https://api.openweathermap.org/data/2.5/forecast?id=\" + codes[city] + \"&appid=\" + key;\r\n\treturn changeURL(newurl);\r\n}\r\n\r\nfunction changeURLByCoords(lat, lon){\r\n\tlet newurl = \"https://api.openweathermap.org/data/2.5/forecast?lat=\" + lat + \"&lon=\" + lon + \"&appid=\" + key;\r\n\treturn changeURL(newurl);\r\n}\r\n\r\n// return whether or not url changed\r\nfunction changeURL(newurl){\r\n\tif (newurl === url){\r\n\t\treturn false;\r\n\t}\r\n\turl = newurl;\r\n\treturn true;\r\n}\r\n\r\n/* The Component */\r\nclass Forecast extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {days: 0,\r\n\t\thighs: 0, // high temperatures for each day\r\n\t\tlows: 0, //  low temperatures for each day\r\n\t\tconditions: 0, // conditions for each day\r\n\t\theader: \"Toronto's Forecast\", // main header for application\r\n\t\tstatus: 200, // status of fetch calls\r\n\t\thourly: [], // temperatures for each 3-hour time period\r\n\t\thourlyConditions: [], // conditions for each 3-hour time period\r\n\t\tdescriptions: [], // descriptions of the conditions for each 3-hour time period\r\n\t\tdayIndex: -1, // index of which weather card is currently being focused on\r\n\t\t// -1 means no weather card is being focused on i.e main forecast is displayed\r\n\t\t};\r\n\t\tthis.handleMapSubmit = this.handleMapSubmit.bind(this);\r\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\r\n\t\tthis.dayFocus = this.dayFocus.bind(this);\r\n\t}\r\n\r\n\t// Executes when coordinates are submitted\r\n\thandleMapSubmit(lat, lon) {\r\n\t\tif (changeURLByCoords(lat, lon)) {\r\n\t\t\tthis.componentDidMount();\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Executes when one of the given Ontario cities are submitted\r\n\thandleSubmit(event) {\r\n\t\tevent.preventDefault();\r\n\t\tif (changeURLByCity(event.target.elements[citySelectName].value)){\r\n\t\t\tthis.componentDidMount();\r\n\t\t}\r\n  \t}\r\n\t\r\n\t// Executes when a single WeatherCards gets clicked on\r\n\t// index indicates which WeatherCard was clicked\r\n\tdayFocus(index){\r\n\t\tthis.setState({dayIndex: index});\r\n\t}\r\n\t\r\n\trender(){\r\n\t\t// Default render\r\n\t\tif (this.state.days === 0){\r\n\t\t\treturn (<h1>{\"The Forecast is loading, please wait\"}</h1>);\r\n\t\t}\r\n\t\t// API only allows 60 requests per minute\r\n\t\tif (this.state.status === 429){\r\n\t\t\treturn (<h1>{\"Too many forecast requests have been made. Please come back in an hour.\"}</h1>);\r\n\t\t}\r\n\t\t// render detailed forecast for single day\r\n\t\tif (this.state.dayIndex !== -1){\r\n\t\t\treturn <div style = {daycastStyle}>\r\n\t\t\t<DayCast day={this.state.days[this.state.dayIndex]}\r\n\t\t\tvalues={this.state.hourly}\r\n\t\t\tstart={this.state.dayIndex*8}\r\n\t\t\tconditions={this.state.hourlyConditions}\r\n\t\t\tdescriptions={this.state.descriptions}\r\n\t\t\tmainCondition={this.state.conditions[this.state.dayIndex]}/>\r\n\t\t\t<button style={{backgroundColor: 'red'}}className=\"cardButton\"onClick={() => this.dayFocus((this.state.dayIndex + 4) % 5)}>Previous</button> \r\n\t\t\t<button style={{backgroundColor: 'dodgerblue'}}className=\"cardButton\"onClick={() => this.dayFocus(-1)}>Back</button>\r\n\t\t\t<button style={{backgroundColor: 'forestgreen'}}className=\"cardButton\"onClick={() => this.dayFocus((this.state.dayIndex + 1) % 5)}>Next</button>\r\n\t\t\t</div>;\r\n\t\t}\r\n\t\t// render basic forecast for 5 days\r\n\t\telse {\r\n\t\t\tconst cards = [0,1,2,3,4].map(i => <div onClick={() => this.dayFocus(i)} className={\"Card\"} key={i}>\r\n\t\t\t\t\t<WeatherCard \r\n\t\t\t\t\t\t\tday={this.state.days[i]}\r\n\t\t\t\t\t\t\thigh={this.state.highs[i]}\r\n\t\t\t\t\t\t\tlow={this.state.lows[i]} \r\n\t\t\t\t\t\t\tcondition={this.state.conditions[i]}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div> \r\n\t\t\t);\r\n\t\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h1>{this.state.header}</h1>\r\n\r\n\t\t\t\t\t<div id=\"cardContainer\">\r\n\t\t\t\t\t\t{cards}\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<form onSubmit={this.handleSubmit}>\r\n\t\t\t\t\t\t<label>\r\n\t\t\t\t\t\t\tChoose a city to display its forecast <br></br>\r\n\t\t\t\t\t\t\t<CitySelectBox name={citySelectName} />\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<input type=\"submit\" value=\"Submit\" />\r\n\t\t\t\t\t</form>\r\n\r\n\t\t\t\t\t<Map submit={this.handleMapSubmit} />\t\t\t\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Data gets fetched here\r\n\tasync componentDidMount(){\r\n\t\tvar info = await getEverything(url);\r\n\t\t(info === -1) ? this.setState({status: 429}) : this.setState({...info});\r\n\t}\r\n}\r\n\t\r\nexport default Forecast;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Forecast from './Forecast.js';\r\n\r\nReactDOM.render(<Forecast />, document.getElementById('root'));"],"sourceRoot":""}