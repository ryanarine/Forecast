{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Xerxis\\\\Desktop\\\\Projects\\\\Forecast\\\\src\\\\Forecast.js\";\nimport React from 'react';\nimport WeatherCard from './WeatherCard.js';\nimport DayCast from './DayCast.js';\nimport './Forecast.css';\nimport Map from './Map';\nimport getEverything from './Data';\n/* Global variables */\n\nconst key = \"54a84a123d401ac68736a6bca89f4301\";\nconst codes = {\n  toronto: '6167865',\n  brampton: '5907364',\n  mississauga: '6075357',\n  richmondhill: '6122091',\n  kitchener: '5992996',\n  waterloo: '6176823',\n  markham: '6066513',\n  ottawa: '6094817',\n  hamilton: '5969782',\n  vaughan: '6173577',\n  oshawa: '6094578'\n};\nvar url = \"https://api.openweathermap.org/data/2.5/forecast?id=6167865&appid=\" + key;\n/* Styles */\n\nconst daycastStyle = {\n  minWidth: \"500px + 3vh\"\n};\n/* Helper Functions */\n\nfunction changeURLByCity(city) {\n  let newurl = \"https://api.openweathermap.org/data/2.5/forecast?id=\" + codes[city] + \"&appid=\" + key;\n  return changeURL(newurl);\n}\n\nfunction changeURLByCoords(lat, lon) {\n  let newurl = \"https://api.openweathermap.org/data/2.5/forecast?lat=\" + lat + \"&lon=\" + lon + \"&appid=\" + key;\n  return changeURL(newurl);\n} // return whether or not url changed\n\n\nfunction changeURL(newurl) {\n  if (newurl === url) {\n    return false;\n  }\n\n  url = newurl;\n  return true;\n}\n/* The Component */\n\n\nclass Forecast extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      days: 0,\n      highs: 0,\n      lows: 0,\n      conds: 0,\n      formCity: 'toronto',\n      city: 'toronto',\n      cityName: 'Toronto',\n      status: 200,\n      starts: [],\n      hourly: [],\n      hourlyConds: [],\n      descriptions: [],\n      dayIndex: -1\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleMapSubmit = this.handleMapSubmit.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.dayFocus = this.dayFocus.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      formCity: event.target.value\n    });\n  }\n\n  handleMapSubmit(lat, lon) {\n    if (changeURLByCoords(lat, lon)) {\n      this.componentDidMount();\n    }\n  }\n\n  handleSubmit(event) {\n    if (changeURLByCity(this.state.formCity)) {\n      this.setState({\n        city: this.state.formCity\n      }, () => this.componentDidMount());\n    }\n\n    event.preventDefault();\n  }\n\n  dayFocus(index) {\n    this.setState({\n      dayIndex: index\n    });\n  }\n\n  render() {\n    if (this.state.days === 0) {\n      return React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"The Forecast is loading, please wait\");\n    } // API only allows 60 requests per minute\n\n\n    if (this.state.status === 429) {\n      return React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"Too many forecast requests have been made. Please come back in an hour.\");\n    } // render detailed forecast for single day\n\n\n    if (this.state.dayIndex !== -1) {\n      return React.createElement(\"div\", {\n        style: daycastStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(DayCast, {\n        day: this.state.days[this.state.dayIndex],\n        values: this.state.hourly,\n        start: this.state.dayIndex * 8,\n        conditions: this.state.hourlyConds,\n        descriptions: this.state.descriptions,\n        mainCondition: this.state.conds[this.state.dayIndex],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        id: \"backbtn\",\n        onClick: () => this.dayFocus(-1),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"Back\"));\n    } // render basic forecast for 5 days\n    else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          },\n          __self: this\n        }, this.state.cityName), React.createElement(\"div\", {\n          id: \"cardContainer\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          onClick: () => this.dayFocus(0),\n          className: \"Card\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        }, \" \", React.createElement(WeatherCard, {\n          day: this.state.days[0],\n          high: this.state.highs[0],\n          low: this.state.lows[0],\n          condition: this.state.conds[0],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        }), \" \"), React.createElement(\"div\", {\n          onClick: () => this.dayFocus(1),\n          className: \"Card\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }, \" \", React.createElement(WeatherCard, {\n          day: this.state.days[1],\n          high: this.state.highs[1],\n          low: this.state.lows[1],\n          condition: this.state.conds[1],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }), \" \"), React.createElement(\"div\", {\n          onClick: () => this.dayFocus(2),\n          className: \"Card\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        }, \" \", React.createElement(WeatherCard, {\n          day: this.state.days[2],\n          high: this.state.highs[2],\n          low: this.state.lows[2],\n          condition: this.state.conds[2],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        }), \" \"), React.createElement(\"div\", {\n          onClick: () => this.dayFocus(3),\n          className: \"Card\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        }, \" \", React.createElement(WeatherCard, {\n          day: this.state.days[3],\n          high: this.state.highs[3],\n          low: this.state.lows[3],\n          condition: this.state.conds[3],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        }), \" \"), React.createElement(\"div\", {\n          onClick: () => this.dayFocus(4),\n          className: \"Card\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }, \" \", React.createElement(WeatherCard, {\n          day: this.state.days[4],\n          high: this.state.highs[4],\n          low: this.state.lows[4],\n          condition: this.state.conds[4],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }), \" \")), React.createElement(\"form\", {\n          onSubmit: this.handleSubmit,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        }, \"Choose a city to display its forecast \", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        }), React.createElement(\"select\", {\n          value: this.state.formCity,\n          onChange: this.handleChange,\n          size: 2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }, React.createElement(\"option\", {\n          value: \"toronto\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        }, \"Toronto\"), React.createElement(\"option\", {\n          value: \"brampton\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        }, \"Brampton\"), React.createElement(\"option\", {\n          value: \"mississauga\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        }, \"Mississauga\"), React.createElement(\"option\", {\n          value: \"richmondhill\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }, \"Richmond Hill\"), React.createElement(\"option\", {\n          value: \"kitchener\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }, \"Kitchener\"), React.createElement(\"option\", {\n          value: \"waterloo\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        }, \"Waterloo\"), React.createElement(\"option\", {\n          value: \"markham\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        }, \"Markham\"), React.createElement(\"option\", {\n          value: \"ottawa\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        }, \"Ottawa\"), React.createElement(\"option\", {\n          value: \"hamilton\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140\n          },\n          __self: this\n        }, \"Hamilton\"), React.createElement(\"option\", {\n          value: \"vaughan\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        }, \"Vaughan\"), React.createElement(\"option\", {\n          value: \"oshawa\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142\n          },\n          __self: this\n        }, \"Oshawa\"))), React.createElement(\"input\", {\n          type: \"submit\",\n          value: \"Submit\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145\n          },\n          __self: this\n        })), React.createElement(Map, {\n          submit: this.handleMapSubmit,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147\n          },\n          __self: this\n        }));\n      }\n  }\n\n  async componentDidMount() {\n    var info = await getEverything(url);\n\n    if (info === -1) {\n      this.setState({\n        status: 429\n      });\n    } else {\n      this.setState({\n        days: info.days,\n        highs: info.highs,\n        lows: info.lows,\n        conds: info.conditions,\n        starts: info.starts,\n        hourly: info.hourly,\n        hourlyConds: info.hourlyConditions,\n        descriptions: info.descriptions,\n        cityName: info.city\n      });\n    }\n  }\n\n}\n\nexport default Forecast;","map":{"version":3,"sources":["C:\\Users\\Xerxis\\Desktop\\Projects\\Forecast\\src\\Forecast.js"],"names":["React","WeatherCard","DayCast","Map","getEverything","key","codes","toronto","brampton","mississauga","richmondhill","kitchener","waterloo","markham","ottawa","hamilton","vaughan","oshawa","url","daycastStyle","minWidth","changeURLByCity","city","newurl","changeURL","changeURLByCoords","lat","lon","Forecast","Component","constructor","props","state","days","highs","lows","conds","formCity","cityName","status","starts","hourly","hourlyConds","descriptions","dayIndex","handleChange","bind","handleMapSubmit","handleSubmit","dayFocus","event","setState","target","value","componentDidMount","preventDefault","index","render","info","conditions","hourlyConditions"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport WeatherCard from './WeatherCard.js';\r\nimport DayCast from './DayCast.js';\r\nimport './Forecast.css';\r\nimport Map from './Map';\r\nimport getEverything from './Data';\r\n\r\n\r\n/* Global variables */\r\nconst key = \"54a84a123d401ac68736a6bca89f4301\";\r\n\r\nconst codes = {toronto: '6167865',\r\nbrampton: '5907364',\r\nmississauga: '6075357',\r\nrichmondhill: '6122091',\r\nkitchener: '5992996',\r\nwaterloo: '6176823', \r\nmarkham: '6066513',\r\nottawa: '6094817',\r\nhamilton: '5969782', \r\nvaughan: '6173577', \r\noshawa: '6094578'};\r\n\r\nvar url = \"https://api.openweathermap.org/data/2.5/forecast?id=6167865&appid=\" + key;\r\n\r\n/* Styles */\r\nconst daycastStyle = {\r\n\tminWidth: \"500px + 3vh\"\r\n};\r\n\r\n/* Helper Functions */\r\nfunction changeURLByCity(city){\r\n\tlet newurl = \"https://api.openweathermap.org/data/2.5/forecast?id=\" + codes[city] + \"&appid=\" + key;\r\n\treturn changeURL(newurl);\r\n}\r\n\r\nfunction changeURLByCoords(lat, lon){\r\n\tlet newurl = \"https://api.openweathermap.org/data/2.5/forecast?lat=\" + lat + \"&lon=\" + lon + \"&appid=\" + key;\r\n\treturn changeURL(newurl);\r\n}\r\n\r\n// return whether or not url changed\r\nfunction changeURL(newurl){\r\n\tif (newurl === url){\r\n\t\treturn false;\r\n\t}\r\n\turl = newurl;\r\n\treturn true;\r\n}\r\n\r\n/* The Component */\r\nclass Forecast extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {days: 0,\r\n\t\thighs: 0,\r\n\t\tlows: 0,\r\n\t\tconds: 0,\r\n\t\tformCity: 'toronto',\r\n\t\tcity: 'toronto',\r\n\t\tcityName: 'Toronto',\r\n\t\tstatus: 200,\r\n\t\tstarts: [],\r\n\t\thourly: [],\r\n\t\thourlyConds: [],\r\n\t\tdescriptions: [],\r\n\t\tdayIndex: -1,\r\n\t\t};\r\n\t\tthis.handleChange = this.handleChange.bind(this);\r\n\t\tthis.handleMapSubmit = this.handleMapSubmit.bind(this);\r\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\r\n\t\tthis.dayFocus = this.dayFocus.bind(this);\r\n\t}\r\n\t\r\n\thandleChange(event) {\r\n\t\tthis.setState({formCity: event.target.value});\r\n\t}\r\n\t\r\n\thandleMapSubmit(lat, lon) {\r\n\t\tif (changeURLByCoords(lat, lon)) {\r\n\t\t\tthis.componentDidMount();\r\n\t\t}\r\n\t}\r\n\t\r\n\thandleSubmit(event) {\r\n\t\tif (changeURLByCity(this.state.formCity)){\r\n\t\t\tthis.setState({city: this.state.formCity}, () => this.componentDidMount());\r\n\t\t}\r\n    event.preventDefault();\r\n  }\r\n\t\r\n\tdayFocus(index){\r\n\t\tthis.setState({dayIndex: index});\r\n\t}\r\n\t\r\n\trender(){\r\n\t\tif (this.state.days === 0){\r\n\t\t\treturn (<h1>{\"The Forecast is loading, please wait\"}</h1>);\r\n\t\t}\r\n\t\t// API only allows 60 requests per minute\r\n\t\tif (this.state.status === 429){\r\n\t\t\treturn (<h1>{\"Too many forecast requests have been made. Please come back in an hour.\"}</h1>);\r\n\t\t}\r\n\t\t// render detailed forecast for single day\r\n\t\tif (this.state.dayIndex !== -1){\r\n\t\t\treturn <div style = {daycastStyle}>\r\n\t\t\t<DayCast day={this.state.days[this.state.dayIndex]}\r\n\t\t\tvalues={this.state.hourly}\r\n\t\t\tstart={this.state.dayIndex*8}\r\n\t\t\tconditions={this.state.hourlyConds}\r\n\t\t\tdescriptions={this.state.descriptions}\r\n\t\t\tmainCondition={this.state.conds[this.state.dayIndex]}/>\r\n\t\t\t<button id=\"backbtn\"onClick={() => this.dayFocus(-1)}>Back</button>\r\n\t\t\t</div>;\r\n\t\t}\r\n\t\t// render basic forecast for 5 days\r\n\t\telse {\r\n\t\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t<h1>{this.state.cityName}</h1>\r\n      <div id=\"cardContainer\">\r\n      <div onClick={() => this.dayFocus(0)} className={\"Card\"}> <WeatherCard day={this.state.days[0]} high={this.state.highs[0]} low={this.state.lows[0]} condition={this.state.conds[0]} /> </div>\r\n\t\t\t<div onClick={()\t => this.dayFocus(1)} className={\"Card\"}> <WeatherCard day={this.state.days[1]} high={this.state.highs[1]} low={this.state.lows[1]} condition={this.state.conds[1]}/> </div>\r\n\t\t\t<div onClick={() => this.dayFocus(2)} className={\"Card\"}> <WeatherCard day={this.state.days[2]} high={this.state.highs[2]} low={this.state.lows[2]} condition={this.state.conds[2]}/> </div>\r\n\t\t\t<div onClick={() => this.dayFocus(3)} className={\"Card\"}> <WeatherCard day={this.state.days[3]} high={this.state.highs[3]} low={this.state.lows[3]} condition={this.state.conds[3]}/> </div>\r\n\t\t\t<div onClick={() => this.dayFocus(4)} className={\"Card\"}> <WeatherCard day={this.state.days[4]} high={this.state.highs[4]} low={this.state.lows[4]} condition={this.state.conds[4]}/> </div>\r\n\t\t\t</div>\r\n\t\t\t<form onSubmit={this.handleSubmit}>\r\n        <label>\r\n          Choose a city to display its forecast <br></br>\r\n          <select value={this.state.formCity} onChange={this.handleChange} size={2}>\r\n            <option value=\"toronto\">Toronto</option>\r\n            <option value=\"brampton\">Brampton</option>\r\n\t\t\t\t\t\t<option value=\"mississauga\">Mississauga</option>\r\n\t\t\t\t\t\t<option value=\"richmondhill\">Richmond Hill</option>\r\n\t\t\t\t\t\t<option value=\"kitchener\">Kitchener</option>\r\n\t\t\t\t\t\t<option value=\"waterloo\">Waterloo</option>\r\n\t\t\t\t\t\t<option value=\"markham\">Markham</option>\r\n\t\t\t\t\t\t<option value=\"ottawa\">Ottawa</option>\r\n\t\t\t\t\t\t<option value=\"hamilton\">Hamilton</option>\r\n\t\t\t\t\t\t<option value=\"vaughan\">Vaughan</option>\r\n\t\t\t\t\t\t<option value=\"oshawa\">Oshawa</option>\r\n          </select>\r\n        </label>\r\n        <input type=\"submit\" value=\"Submit\" />\r\n      </form>\r\n\t\t\t<Map submit={this.handleMapSubmit} />\t\t\t\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\t\r\n\tasync componentDidMount(){\r\n\t\tvar info = await getEverything(url);\r\n\t\tif (info === -1){\r\n\t\t\tthis.setState({status: 429});\r\n\t\t}\r\n\t\telse {\r\n\t\tthis.setState({days: info.days, highs: info.highs,\r\n\t\tlows: info.lows, conds: info.conditions,\r\n\t\tstarts: info.starts, hourly: info.hourly,\r\n\t\thourlyConds: info.hourlyConditions, descriptions: info.descriptions,\r\n\t\tcityName: info.city});\r\n\t\t}\r\n\t}\r\n}\r\n\t\r\nexport default Forecast;"]},"metadata":{},"sourceType":"module"}