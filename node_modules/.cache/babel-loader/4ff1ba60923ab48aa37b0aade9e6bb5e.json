{"ast":null,"code":"const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n/*\r\n-The following are functions that parse the json data\r\n-The data comes in as an array of 40 entries\r\n-Each entry represents the weather during a 3 hour time period\r\n-Roughly every 3 hours the API updates the data, so a new time period is entered\r\nbut the oldest one is removed\r\n-Since this is a 5-day forecast, the data for the 6th day (if there is one)\r\nis ignored\r\n-The missing data for the 1st day is compensated for by inserting the string\r\n'N/A' for the missing time periods\r\n*/\n// Get the name of the city and return header string\n\nfunction getCityName(data) {\n  let name = data.city.name;\n\n  if (name) {\n    return name + \"'s Forecast\";\n  }\n\n  return \"Forecast of Unknown City\";\n} // Get the names of the 5 days\n\n\nfunction getDays(data) {\n  var arr = [];\n\n  for (let i = 0; i < 40; i += 8) {\n    arr.push(days[(new Date(data.list[i].dt_txt.slice(0, 10)).getDay() + 1) % 7]);\n  }\n\n  return arr;\n} // Get the main conditions of each day\t\n\n\nfunction getConditions(conds, starts) {\n  var arr = [];\n  var day = []; // Weight value is based how important a timeslot is to a normal working citizen\n  // For example the weather at 3AM is significantly less important \n  // than the weather at 3PM to a normal working citizen\n  // In other words, working hours have a larger weight than sleeping/resting hours\n\n  const weights = [1, 1, 2, 3, 3, 3, 2, 1];\n\n  for (let i = 0; i < 5; i++) {\n    day = {\n      maxValue: 0,\n      maxCondition: \"N/A\"\n    };\n\n    for (let j = 8 * i; j < 8 * (i + 1); j++) {\n      let cond = conds[j];\n      if (cond === \"N/A\") continue;\n      day[cond] = day[cond] + weights[j % 8] || weights[j % 8];\n\n      if (day[cond] > day.maxValue) {\n        day.maxValue = day[cond];\n        day.maxCondition = cond;\n      }\n    }\n\n    arr.push(day.maxCondition);\n  }\n\n  return arr;\n} // Get the high and low temperatures of each day\n\n\nfunction getHighLows(data, starts) {\n  var lows = [];\n  var highs = [];\n\n  for (let i = 0; i < starts.length - 1; i++) {\n    var high = 0; // Temperatures in Kelvin cannot go below or at 0\n\n    var low = Number.MAX_SAFE_INTEGER;\n    var start = starts[i];\n    var end = starts[i + 1];\n\n    for (let j = start; j < end; j++) {\n      high = Math.max(high, data.list[j].main.temp_max);\n      low = Math.min(low, data.list[j].main.temp_min);\n    }\n\n    highs.push((high - 273.15).toFixed(2));\n    lows.push((low - 273.15).toFixed(2));\n  }\n\n  return {\n    highs: highs,\n    lows: lows\n  };\n} // Get the ending index of the data array that corresponds to the first day\n\n\nfunction getEnd(entry1) {\n  return (24 - new Date(entry1.dt_txt).getHours()) / 3;\n} // Get the starting index of the data array that corresponds to each day\n\n\nfunction getStarts(data) {\n  var arr = [];\n  let end = getEnd(data[0]);\n  arr.push(0);\n\n  for (let i = end; i <= 40; i += 8) {\n    arr.push(i);\n  }\n\n  return arr;\n} // Get the data (temperature, condition, condition description) for each time period\n\n\nfunction getHourly(arr, starts) {\n  var start = starts[1];\n  var temps = [];\n  var conds = [];\n  var descs = []; // All of the data for the first day may not be present\n  // Push all the N/A data\n\n  for (let i = 0; i < 8 - start; i++) {\n    temps.push(\"N/A\");\n    conds.push(\"N/A\");\n    descs.push(\"N/A\");\n  }\n\n  for (let i = 0; i < 40 - 8 + start; i++) {\n    temps.push((arr[i].main.temp - 273.15).toFixed(2) + \"Â°C\");\n    conds.push(arr[i].weather[0].main);\n    descs.push(arr[i].weather[0].description);\n  }\n\n  return {\n    temps,\n    conds,\n    descs\n  };\n} // Get all the relevant data\n\n\nasync function getEverything(url) {\n  var response = await fetch(url);\n\n  if (response.status === 429) {\n    return -1;\n  } //Too many requests\n\n\n  var forecast = await response.json();\n  var starts = getStarts(forecast.list);\n  var info = {};\n  info.city = getCityName(forecast);\n  info.days = getDays(forecast);\n  var highLows = getHighLows(forecast, starts);\n  var hourlyData = getHourly(forecast.list, starts);\n  info.conditions = getConditions(hourlyData.conds, starts);\n  info.highs = highLows.highs;\n  info.lows = highLows.lows;\n  info.starts = starts;\n  info.hourly = hourlyData.temps;\n  info.hourlyConditions = hourlyData.conds;\n  info.descriptions = hourlyData.descs;\n  return await info;\n}\n\nexport default getEverything;","map":{"version":3,"sources":["C:\\Users\\Xerxis\\Desktop\\Projects\\Forecast\\src\\Data.js"],"names":["days","getCityName","data","name","city","getDays","arr","i","push","Date","list","dt_txt","slice","getDay","getConditions","conds","starts","day","weights","maxValue","maxCondition","j","cond","getHighLows","lows","highs","length","high","low","Number","MAX_SAFE_INTEGER","start","end","Math","max","main","temp_max","min","temp_min","toFixed","getEnd","entry1","getHours","getStarts","getHourly","temps","descs","temp","weather","description","getEverything","url","response","fetch","status","forecast","json","info","highLows","hourlyData","conditions","hourly","hourlyConditions","descriptions"],"mappings":"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","sourcesContent":["const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n\r\n/*\r\n-The following are functions that parse the json data\r\n-The data comes in as an array of 40 entries\r\n-Each entry represents the weather during a 3 hour time period\r\n-Roughly every 3 hours the API updates the data, so a new time period is entered\r\nbut the oldest one is removed\r\n-Since this is a 5-day forecast, the data for the 6th day (if there is one)\r\nis ignored\r\n-The missing data for the 1st day is compensated for by inserting the string\r\n'N/A' for the missing time periods\r\n*/\r\n\r\n// Get the name of the city and return header string\r\nfunction getCityName(data) {\r\n\tlet name = data.city.name;\r\n\tif (name){\r\n\t\treturn name + \"'s Forecast\";\r\n\t}\r\n\treturn \"Forecast of Unknown City\";\r\n}\r\n\r\n// Get the names of the 5 days\r\nfunction getDays(data) {\r\n\tvar arr = [];\r\n\tfor (let i = 0; i < 40; i+=8){\r\n\t\tarr.push(days[(new Date(data.list[i].dt_txt.slice(0,10)).getDay() + 1) % 7]);\r\n\t}\r\n\treturn arr;\r\n}\r\n\r\n// Get the main conditions of each day\t\r\nfunction getConditions(conds, starts) {\r\n\tvar arr = [];\r\n\tvar day = [];\r\n\t// Weight value is based how important a timeslot is to a normal working citizen\r\n\t// For example the weather at 3AM is significantly less important \r\n\t// than the weather at 3PM to a normal working citizen\r\n\t// In other words, working hours have a larger weight than sleeping/resting hours\r\n  const weights = [1, 1, 2, 3, 3, 3, 2, 1];\r\n\tfor (let i = 0; i < 5; i++){\r\n\t\tday = {maxValue: 0, maxCondition: \"N/A\"};\r\n\t\tfor(let j = 8 * i; j < 8 * (i+1); j++){\r\n\t\t\tlet cond = conds[j]\r\n\t\t\tif (cond === \"N/A\") continue;\r\n\t\t\tday[cond] = day[cond]+weights[j % 8] || weights[j % 8];\r\n\t\t\tif (day[cond] > day.maxValue){\r\n\t\t\t\tday.maxValue = day[cond];\r\n\t\t\t\tday.maxCondition = cond;\r\n\t\t\t}\r\n\t\t}\r\n\t\tarr.push(day.maxCondition);\r\n\t}\r\n\treturn arr;\r\n}\r\n\r\n// Get the high and low temperatures of each day\r\nfunction getHighLows(data, starts) {\r\n\tvar lows = [];\r\n\tvar highs = [];\r\n\tfor (let i = 0; i < starts.length - 1; i++){\r\n\t\tvar high = 0; // Temperatures in Kelvin cannot go below or at 0\r\n\t\tvar low = Number.MAX_SAFE_INTEGER;\r\n\t\tvar start = starts[i];\r\n\t\tvar end = starts[i + 1];\r\n\t\tfor (let j = start; j < end; j++){\r\n\t\t\thigh = Math.max(high, data.list[j].main.temp_max);\r\n\t\t\tlow = Math.min(low, data.list[j].main.temp_min);\r\n\t\t}\r\n\t\thighs.push((high - 273.15).toFixed(2));\r\n\t\tlows.push((low - 273.15).toFixed(2));\r\n\t}\r\n\treturn {highs: highs, lows: lows};\r\n}\r\n\r\n// Get the ending index of the data array that corresponds to the first day\r\nfunction getEnd(entry1) {\r\n\treturn (24 - new Date(entry1.dt_txt).getHours()) / 3;\r\n}\r\n\r\n// Get the starting index of the data array that corresponds to each day\r\nfunction getStarts(data) {\r\n\tvar arr = [];\r\n\tlet end = getEnd(data[0]);\r\n\tarr.push(0);\r\n\tfor (let i = end; i <= 40; i+=8){\r\n\t\tarr.push(i);\r\n\t}\r\n\treturn arr;\r\n}\r\n\r\n// Get the data (temperature, condition, condition description) for each time period\r\nfunction getHourly(arr, starts){\r\n\tvar start = starts[1];\r\n\t\tvar temps = [];\r\n\t\tvar conds = [];\r\n\t\tvar descs = [];\r\n\t\t// All of the data for the first day may not be present\r\n\t\t// Push all the N/A data\r\n\t\tfor (let i = 0; i < 8-start; i++){\r\n\t\t\ttemps.push(\"N/A\");\r\n\t\t\tconds.push(\"N/A\");\r\n\t\t\tdescs.push(\"N/A\");\r\n\t\t}\t\r\n\t\tfor (let i = 0; i < (40 - 8 + start); i++){\r\n\t\t\ttemps.push((arr[i].main.temp - 273.15).toFixed(2) + \"Â°C\");\r\n\t\t\tconds.push(arr[i].weather[0].main);\r\n\t\t\tdescs.push(arr[i].weather[0].description);\r\n\t\t}\r\n\t\treturn {temps, conds, descs};\r\n}\r\n\r\n// Get all the relevant data\r\nasync function getEverything(url){\r\n\tvar response = await fetch(url);\r\n\t\tif (response.status === 429){return -1;} //Too many requests\r\n\t\tvar forecast =  await response.json();\r\n\t\tvar starts = getStarts(forecast.list);\r\n\t\tvar info = {};\r\n\t\tinfo.city = getCityName(forecast);\r\n\t\tinfo.days = getDays(forecast);\r\n\t\tvar highLows = getHighLows(forecast, starts);\r\n\t\tvar hourlyData = getHourly(forecast.list, starts);\r\n\t\tinfo.conditions = getConditions(hourlyData.conds, starts);\r\n\t\tinfo.highs = highLows.highs;\r\n\t\tinfo.lows = highLows.lows;\r\n\t\tinfo.starts = starts;\r\n\t\tinfo.hourly  = hourlyData.temps;\r\n\t\tinfo.hourlyConditions = hourlyData.conds;\r\n\t\tinfo.descriptions = hourlyData.descs;\r\n\t\treturn await info;\r\n}\r\n\r\nexport default getEverything;"]},"metadata":{},"sourceType":"module"}